// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteBook.API.DataModel;

#nullable disable

namespace NoteBook.API.Migrations
{
    [DbContext(typeof(NoteBookDBContext))]
    partial class NoteBookDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NoteBook.API.DataModel.Accountinfo", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("AccountInfo");
                });

            modelBuilder.Entity("NoteBook.API.DataModel.NewMemoinfo", b =>
                {
                    b.Property<int>("MemoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemoID"), 1L, 1);

                    b.Property<int>("AccountInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemoID");

                    b.HasIndex("AccountInfoId");

                    b.ToTable("NewMemoInfo");
                });

            modelBuilder.Entity("NoteBook.API.DataModel.WaitInfo", b =>
                {
                    b.Property<int>("Waitid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Waitid"), 1L, 1);

                    b.Property<int>("AccountInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Waitid");

                    b.HasIndex("AccountInfoId");

                    b.ToTable("WaitInfo");
                });

            modelBuilder.Entity("NoteBook.API.DataModel.NewMemoinfo", b =>
                {
                    b.HasOne("NoteBook.API.DataModel.Accountinfo", "AccountInfo")
                        .WithMany("MemoDTOs")
                        .HasForeignKey("AccountInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("NoteBook.API.DataModel.WaitInfo", b =>
                {
                    b.HasOne("NoteBook.API.DataModel.Accountinfo", "AccountInfo")
                        .WithMany("WaitDTOs")
                        .HasForeignKey("AccountInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("NoteBook.API.DataModel.Accountinfo", b =>
                {
                    b.Navigation("MemoDTOs");

                    b.Navigation("WaitDTOs");
                });
#pragma warning restore 612, 618
        }
    }
}
